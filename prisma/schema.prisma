datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  vault         Vault[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Vault {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId

  credentials Credential[]
  notes       Note[]
  folders     Folder[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Credential {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  folderId String @db.ObjectId
  vaultId  String @db.ObjectId

  passwordHistory String[]

  name     String
  url      String
  username String
  password String

  favorite Boolean @default(false)
  reprompt Boolean @default(false)

  creatationDate DateTime @default(now())
  revisionDate   DateTime @default(now())

  vault Vault @relation(fields: [vaultId], references: [id], onDelete: Cascade)
}

model Note {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  folderId String @db.ObjectId
  vaultId  String @db.ObjectId

  title   String
  content String

  favorite Boolean @default(false)
  reprompt Boolean @default(false)

  creatationDate DateTime @default(now())
  revisionDate   DateTime @default(now())

  vault Vault @relation(fields: [vaultId], references: [id], onDelete: Cascade)
}

model Folder {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  vaultId String @db.ObjectId

  name String

  vault Vault @relation(fields: [vaultId], references: [id], onDelete: Cascade)
}
